formula = y~ poly(x, 2),
se = FALSE)
plot3
plot3 <- plot2 +
geom_smooth(aes(group = 1),
method = "lm",
color = "black",
formula = y~ poly(x, 3),
se = FALSE)
plot3
plot3 <- plot2 +
geom_smooth(aes(group = 1),
method = "lm",
color = "black",
formula = y~ poly(x, 1),
se = FALSE)
plot3
plot3 <- plot2 +
geom_smooth(aes(group = 1),
method = "lm",
color = "black",
formula = y~ poly(x, 1),
se = T)
plot3
plot3 + theme_bw() +
scale_x_continuous("Corruption Perceptions Index, 2011\n(10 = least corrupt)") +
scale_y_continuous("Human Development Index, 2011\n(1 = best)") +
theme(legend.position = "top", legend.direction = "horizontal")
plot3
plot3 + theme_bw() +
scale_x_continuous("Corruption Perceptions Index, 2011\n(10 = least corrupt)") +
scale_y_continuous("Human Development Index, 2011\n(1 = best)") +
theme(legend.position = "top", legend.direction = "horizontal")
plot3
plot3 + theme_bw() +
scale_x_continuous("Corruption Perceptions Index, 2011\n(10 = least corrupt)") +
scale_y_continuous("Human Development Index, 2011\n(1 = best)") +
theme(legend.position = "top", legend.direction = "horizontal")
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.1, vjust="inward",
data = dat[dat$Country %in% labels, ])
plot3 <- plot2 +
geom_smooth(aes(group = 1),
method = "lm",
color = "black",
formula = y~ poly(x, 1),
se = T)
plot3 + theme_bw() +
scale_x_continuous("Corruption Perceptions Index, 2011\n(10 = least corrupt)") +
scale_y_continuous("Human Development Index, 2011\n(1 = best)") +
theme(legend.position = "top", legend.direction = "horizontal")
plot1
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 'inward', vjust="inward",
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.1, vjust=1.1,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.1, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.5, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.1, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 1.0, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 0.7, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 0.4, vjust=1.5,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 0.4,
data = dat[dat$Country %in% labels, ])
plot2
plot2<-plot1 +
geom_text(aes(label = Country),
color = "black", size = 3, hjust = 'inward',
data = dat[dat$Country %in% labels, ])
plot2
library(maps)
map(nz)
map('nz')
library(ggmap)# load ggmap
myLocation1 <- "Melbourne"
myLocation1
map(myLocation1)
map('Vietnam')
map('Vn')
map('vn')
map('au')
map('nz')
myLocation2 <- c(lon=-95.3632715, lat=29.7632836)# not "Mel
myLocation3 <- c(-130, 30, -105, 50)
library(tmaptools)
library(tmaptools)
geocode_OSM("Melbourne")
?get_stamenmap
?get_googlemap
myLocation4 <- geocode_OSM("Melbourne")
knitr::opts_chunk$set(echo = TRUE)
library(maps)
map("nz")# what a cute country
library(ggmap)# load ggmap
# Define location 3 ways
# 1. location/address
myLocation1 <- "Melbourne"
myLocation1
# 2. lat/long
myLocation2 <- c(lon=-95.3632715, lat=29.7632836)# not "Melbourne"
myLocation2
# 3. an area or bounding box (4 points), lower left lon,
# lower left lat, upper right lon, upper right lat
# (a little glitchy for google maps)
myLocation3 <- c(-130, 30, -105, 50)
myLocation3
library(ggmap)# load ggmap
# Define location 3 ways
# 1. location/address
myLocation1 <- "Melbourne"
myLocation1
# 2. lat/long
myLocation2 <- c(lon=-95.3632715, lat=29.7632836)# not "Melbourne"
myLocation2
# 3. an area or bounding box (4 points), lower left lon,
# lower left lat, upper right lon, upper right lat
# (a little glitchy for google maps)
myLocation3 <- c(-130, 30, -105, 50)
myLocation3
# Yes, Melbourne is where it's supposed to be in, in Australia
# longitude 144.96316
# latitude -37.81422
library(tmaptools)
# Convert location/address to its lat/long coordinates:
geocode_OSM("Melbourne")
# Yes, Melbourne is where it's supposed to be in, in Australia
# longitude 144.96316
# latitude -37.81422
# Yes, Melbourne is where it's supposed to be in, in Australia
# longitude 144.96316
# latitude -37.81422
# Convert location/address to its lat/long coordinates:
geocode_OSM("Melbourne")
# or help(get_stamenmap)
# also try ?get_googlemap, ?get_openstreetmap and ?get_cloudmademap
?get_stamenmap
myLocation4 <- geocode_OSM("Melbourne")
bboxVector <- as.vector(myLocation4$bbox)
bboxVector
myLocation4 <- geocode_OSM("Melbourne")
bboxVector <- as.vector(myLocation4$bbox)
bboxVector
bbox1 <- c(
left = bboxVector[1],
bottom = bboxVector[2],
right = bboxVector[3],
top = bboxVector[4]
)
myMap <- get_stamenmap(
bbox = bbox1,
maptype = "watercolor",
zoom = 13
)
ggmap(myMap)
install.packages(c("curl", "yaml"))
install.packages(c("curl", "yaml"))
knitr::opts_chunk$set(echo = TRUE)
library(maps)
map("nz")# what a cute country
library(ggmap)# load ggmap
# Define location 3 ways
# 1. location/address
myLocation1 <- "Melbourne"
myLocation1
# 2. lat/long
myLocation2 <- c(lon=-95.3632715, lat=29.7632836)# not "Melbourne"
myLocation2
# 3. an area or bounding box (4 points), lower left lon,
# lower left lat, upper right lon, upper right lat
# (a little glitchy for google maps)
myLocation3 <- c(-130, 30, -105, 50)
myLocation3
library(tmaptools)
# Convert location/address to its lat/long coordinates:
geocode_OSM("Melbourne")
# Yes, Melbourne is where it's supposed to be in, in Australia
# longitude 144.96316
# latitude -37.81422
# or help(get_stamenmap)
# also try ?get_googlemap, ?get_openstreetmap and ?get_cloudmademap
?get_stamenmap
myLocation4 <- geocode_OSM("Melbourne")
bboxVector <- as.vector(myLocation4$bbox)
bboxVector
bbox1 <- c(
left = bboxVector[1],
bottom = bboxVector[2],
right = bboxVector[3],
top = bboxVector[4]
)
myMap <- get_stamenmap(
bbox = bbox1,
maptype = "watercolor",
zoom = 13
)
ggmap(myMap)
require(mapproj)
# get map data (lat &amp;amp; lon for boundaries in this case)
m <- map("usa", plot = FALSE)
map(m, project = "mercator") # try mercator first
map.grid(m) # draw graticules
# change the projection to albers
map(m, project = "albers", par=c(39,45))
map.grid(m) # draw graticules to compare more easily
# get unprojected world limits
m <- map('world', plot = FALSE)
# center on New York
map(m, proj = 'azequalarea', orient = c(41,-74,0))
map.grid(m, col = 2) # draw graticules
# get unprojected world limits
m <- map('world', plot = FALSE)
# center on New York
map(m, proj = 'azequalarea', orient = c(144,-37,0))
map.grid(m, col = 2) # draw graticules
geocode_OSM("New York")
geocode_OSM("Australia")
geocode_OSM("Melbourne")
# get unprojected world limits
m <- map('world', plot = FALSE)
# center on New York
map(m, proj = 'azequalarea', orient = c(-37,144,0))
map.grid(m, col = 2) # draw graticules
# center on New York
# get unprojected world limits
m <- map('world', plot = FALSE)
# center on New York
map(m, proj = 'azequalarea', orient = c(41,-74,0))
map.grid(m, col = 2) # draw graticules
# get unprojected world limits
m <- map('world', plot = FALSE)
# center on New York
map(m, proj = 'azequalarea', orient = c(-37,144,0))
map.grid(m, col = 2) # draw graticules
map(m, proj = 'orth', orient = c(-37,144,0))
map.grid(m, col = 2, nx = 6, ny = 5, label = FALSE, lty = 2)
points(
mapproject(
list(y = 41, x = -74)
),
col = 3,
pch = "x",
cex = 2
)# centre on NY
map("state", proj='bonne', param=45)
data(state)
text(
mapproject(
state.center
),
state.abb
)
head(crime)
help(crime)
help(crime)
head(crime)
murder <- subset(crime, offense == "murder")
qmplot(lon, lat,
data = murder,
colour = I('red'),
size = I(3),
darken = .3
)
head(crime)
str(crime)
help(unemp)
head(unemp)
help(county.fips)
head(county.fips)
# use the version installed with maps library!
data(unemp)
# set up intervals
Intervals <-as.numeric(
cut(
unemp$unemp,
c(0,2,4,6,8,10,100)
)
)
Intervals
unemp$unemp
Matches <- Intervals[
match(
county.fips$fips,
unemp$fips
)
]
data(county.fips)
Matches <- Intervals[
match(
county.fips$fips,
unemp$fips
)
]
colors <- c("#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404")
# draw map
map("county",
col = colors[Matches],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
map("county",
col = colors[Matches],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# add title and legend
title("Unemployment by county, 2009")
# draw state boundaries
colors <- c("#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404")
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
plot.new()
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
colors <- c("#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404")
# draw map
map("county",
col = colors[Matches],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic"
)
# draw state boundaries
plot.new()
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
plot.new()
map("county",
col = colors[Matches],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic"
)
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# draw state boundaries
plot.new()
map("county",
col = colors[Matches],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic"
)
# repeat
map("state",
col = "purple",
fill = FALSE,
add = TRUE,
lty = 1,
lwd = 0.3,
projection = "polyconic"
)
# add title and legend
title("Unemployment by county, 2009")
Legend <- c("<2%","2-4%","4-6%","6-8%","8-10%",">10%")
legend("topright", Legend, horiz = TRUE, fill = colors)
library(maptools)
