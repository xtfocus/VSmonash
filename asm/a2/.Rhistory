model <- lm(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6, data = mroz)
summary(model)
yhat <- predict(model)
mroz <- mroz %>%
mutate(pinlf = if_else(yhat > 0.5, 1, 0))
mroz %>%
select(inlf, pinlf) %>%
table() %>%
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(1) %>% # row percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(2) %>% # column percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table() %>% # total percentages
addmargins()
library(lmtest)
bptest(model)
require("estimatr")
library(estimatr)
model_r <- lm_robust(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6,
data = mroz, se_type = "stata")
summary(model)
summary(model_r)
# install.packages("sandwich")
library(sandwich)
# vcovHC returns the variance-covariance matrix of coefficient estimates
# The type HC1 is compatible to stata
vcovHC(model, type = "HC1") %>% # The variance covariance matrix
diag() %>% # Take the diagonal elements-the variance
sqrt() # Square root the variance to get standard error
#coe_model <- coef(model)
#coe_model_r <- coef(model_r)
#cbind(coe_model, coe_model_r) %>% # Combine them as they are columns
#knitr::kable() # Just to make the table prettier
#se_model <- model %>%
#vcov() %>% # Extract the variance covariance matrix
#diag() %>% # Take the diagonal elements-the variance
#sqrt() # Square root the variance to get standard error
#se_model_r <- model_r %>%
#vcov() %>%
#diag() %>%
#sqrt()
#cbind(se_model, se_model_r) %>% # Combine them as they are columns
#knitr::kable() # Just to make the table prettier
#library(rockchalk)
#rockchalk::outreg(list(model, model_r))
knitr::opts_chunk$set(echo = TRUE)
require("lmtest")
require("estimatr")
require("rockchalk")
require("stray")
require("corrplot")
require("sandwich")
require("plotly")
require("GGally")
knitr::opts_chunk$set(echo = TRUE)
require("lmtest")
require("estimatr")
require("rockchalk")
require("stray")
require("corrplot")
require("sandwich")
require("plotly")
require("GGally")
require("lmtest")
require("estimatr")
require("rockchalk")
require("stray")
require("corrplot")
require("sandwich")
require("plotly")
require("GGally")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mroz <- read_csv("mroz.csv")
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary() %>%
knitr::kable()
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
# Display the normal plot (PDF)
boxplot
2
# Display an interactive plot using plotly (HTML or within RStudio)
library(plotly)
boxplot %>% ggplotly()
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary() %>%
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary()
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
# Display the normal plot (PDF)
boxplot
2
# Display an interactive plot using plotly (HTML or within RStudio)
library(plotly)
boxplot %>% ggplotly()
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary()
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
# Display the normal plot (PDF)
boxplot
2
# Display an interactive plot using plotly (HTML or within RStudio)
library(plotly)
boxplot %>% ggplotly()
boxplot %>% ggplotly()
# Display an interactive plot using plotly (HTML or within RStudio)
library(plotly)
boxplot %>% ggplotly()
knitr::opts_chunk$set(echo = TRUE)
require("lmtest")
require("estimatr")
require("rockchalk")
require("stray")
require("corrplot")
require("sandwich")
require("plotly")
require("GGally")
library(tidyverse)
mroz <- read_csv("mroz.csv")
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary() %>%
knitr::kable()
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
# Display the normal plot (PDF)
boxplot
2
# Display an interactive plot using plotly (HTML or within RStudio)
#library(plotly)
#boxplot %>% ggplotly()
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
cor()
mroz %>%
group_by(inlf) %>%
summarise(median(educ), sd(educ),
median(kidslt6), sd(kidslt6),
median(nwifeinc), sd(nwifeinc))
model <- lm(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6, data = mroz)
summary(model)
yhat <- predict(model)
mroz <- mroz %>%
mutate(pinlf = if_else(yhat > 0.5, 1, 0))
mroz %>%
select(inlf, pinlf) %>%
table() %>%
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(1) %>% # row percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(2) %>% # column percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table() %>% # total percentages
addmargins()
library(lmtest)
bptest(model)
require("estimatr")
library(estimatr)
model_r <- lm_robust(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6,
data = mroz, se_type = "stata")
summary(model)
summary(model_r)
# install.packages("sandwich")
library(sandwich)
# vcovHC returns the variance-covariance matrix of coefficient estimates
# The type HC1 is compatible to stata
vcovHC(model, type = "HC1") %>% # The variance covariance matrix
diag() %>% # Take the diagonal elements-the variance
sqrt() # Square root the variance to get standard error
coe_model <- coef(model)
coe_model_r <- coef(model_r)
cbind(coe_model, coe_model_r) %>% # Combine them as they are columns
knitr::kable() # Just to make the table prettier
se_model <- model %>%
vcov() %>% # Extract the variance covariance matrix
diag() %>% # Take the diagonal elements-the variance
sqrt() # Square root the variance to get standard error
se_model_r <- model_r %>%
vcov() %>%
diag() %>%
sqrt()
cbind(se_model, se_model_r) %>% # Combine them as they are columns
knitr::kable() # Just to make the table prettier
library(rockchalk)
rockchalk::outreg(list(model, model_r))
load(corrplot)
require(corrplot)
mroz %>%
correlation <- select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
cor()
require(corrplot)
correlation <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
cor()
correlation
corrplot::corrplot(correlation)
# Display an interactive plot using plotly (HTML or within RStudio)
#library(plotly)
#boxplot %>% ggplotly()
# Display an interactive plot using plotly (HTML or within RStudio)
library(plotly)
boxplot %>% ggplotly()
mroz$exper > 32
sum(mroz$exper > 32)
sum(mroz$exper > 31)
dist(mroz$age)
```{r}
hist(mroz$age)
summarise(mroz$educ > 31)
summary(mroz$educ > 31)
summary(mroz$educ)
sum(mroz$educ > 11$ && mroz$educ < 14)
sum(mroz$educ > 11$ & mroz$educ < 14)
sum(mroz$educ > 11$ && mroz$educ < 14)
sum(mroz$educ > 11 && mroz$educ < 14)
sum(mroz$educ < 11 || mroz$educ > 14)
(mroz$educ < 11 || mroz$educ > 14)
(mroz$educ < 11) || (mroz$educ > 14)
sum(mroz$educ < 11) + sum(mroz$educ > 14)
require(corrplot)
correlation <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
cor()
correlation
corrplot::corrplot(correlation)
mroz$wage
mroz$infl
mroz$inlf
sum(mroz$inlf)
mroz$wage
mroz$wage != NA
mroz$wage == NA
mroz$wage
mroz$wage > 0
sum(mroz$wage > 0)
sum(mroz$wage > 0, na.rm=T)
mroz$inlf
mroz$wage
knitr::opts_chunk$set(echo = TRUE)
require("lmtest")
require("estimatr")
require("rockchalk")
require("stray")
require("corrplot")
require("sandwich")
require("plotly")
require("GGally")
library(tidyverse)
mroz <- read_csv("mroz.csv")
## Summary Statistics Table (note that any variable which isn't numeric will have its type displayed)
mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
summary() %>%
knitr::kable()
## Exploring potential outliers
# Standard boxplot
boxplot <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
# pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
# Change the dataset to a longer format so that it's easier to plot and specify axes
gather(key = "variable", value = "value") %>%
ggplot() +
geom_boxplot(aes(x = variable, y = value))
# Display the normal plot (PDF)
boxplot
# Display an interactive plot using plotly (HTML or within RStudio)
#library(plotly)
#boxplot %>% ggplotly()
require(corrplot)
correlation <- mroz %>%
select(inlf, wage, educ, exper, age, kidslt6, kidsge6) %>%
cor()
correlation
corrplot::corrplot(correlation)
mroz %>%
group_by(inlf) %>%
summarise(median(educ), sd(educ),
median(kidslt6), sd(kidslt6),
median(nwifeinc), sd(nwifeinc))
model <- lm(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6, data = mroz)
summary(model)
yhat <- predict(model)
mroz <- mroz %>%
mutate(pinlf = if_else(yhat > 0.5, 1, 0))
mroz %>%
select(inlf, pinlf) %>%
table() %>%
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(1) %>% # row percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table(2) %>% # column percentages
addmargins()
mroz %>%
select(inlf, pinlf) %>%
table() %>%
prop.table() %>% # total percentages
addmargins()
library(lmtest)
bptest(model)
require("estimatr")
library(estimatr)
model_r <- lm_robust(inlf ~ nwifeinc + educ + exper + age + kidslt6 + kidsge6,
data = mroz, se_type = "stata")
summary(model)
summary(model_r)
# install.packages("sandwich")
library(sandwich)
# vcovHC returns the variance-covariance matrix of coefficient estimates
# The type HC1 is compatible to stata
vcovHC(model, type = "HC1") %>% # The variance covariance matrix
diag() %>% # Take the diagonal elements-the variance
sqrt() # Square root the variance to get standard error
coe_model <- coef(model)
coe_model_r <- coef(model_r)
cbind(coe_model, coe_model_r) %>% # Combine them as they are columns
knitr::kable() # Just to make the table prettier
se_model <- model %>%
vcov() %>% # Extract the variance covariance matrix
diag() %>% # Take the diagonal elements-the variance
sqrt() # Square root the variance to get standard error
se_model_r <- model_r %>%
vcov() %>%
diag() %>%
sqrt()
cbind(se_model, se_model_r) %>% # Combine them as they are columns
knitr::kable() # Just to make the table prettier
library(rockchalk)
rockchalk::outreg(list(model, model_r))
mroz$city
mroz %>%
group_by(city) %>%
summarise(median(educ), sd(educ),
median(kidslt6), sd(kidslt6),
median(nwifeinc), sd(nwifeinc))
yhat <- predict(model)
mroz <- mroz %>%
mutate(pinlf = if_else(yhat > 0.5, 1, 0))
installed.packages('ggvis')
install.packages('ggvis')
shiny::runApp('units/VSmonash/asm/a2')
setwd('~/units/VSmonash/asm/a2/')
dat$location <- factor(dat$location, levels = site.lat$location)
require(ggplot2)
dat <- read.csv('assignment-02-data-formated.csv')
str(dat)
# value: Subtract % and convert to numeric
dat$value <- as.numeric((sub('%', '', dat$value)))
str(dat)
# Sort the latitudes
site.lat <- unique(dat[c('location', 'latitude')])
site_order <- order(site.lat$latitude)
site.lat <- site.lat[site_order,]
dat$location <- factor(dat$location, levels = site.lat$location)
plot1 <- ggplot(dat, aes(year, value)) + geom_point(size=1) + facet_grid(coralType~location)
plot2 <- plot1 + geom_smooth(aes(group = 1),
method = "lm",
color = "green",
formula = y~ poly(x, 2),
size = 0.6,
se = FALSE)
plot3 <- plot2 + theme_bw() +
scale_x_continuous("Year") +
scale_y_continuous("Bleaching percentage") +
theme(legend.position = "top", legend.direction = "horizontal")
plot3
dat <- read.csv('assignment-02-data-formated.csv')
sites <- unique(dat[c('location', 'latitude', 'longitude')])
leaflet(data = sites) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, label= ~as.character(location),
labelOptions = labelOptions(noHide = T, textsize = "10px"))
require(dplyr)
dat <- read.csv('assignment-02-data-formated.csv')
sites <- unique(dat[c('location', 'latitude', 'longitude')])
leaflet(data = sites) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, label= ~as.character(location),
labelOptions = labelOptions(noHide = T, textsize = "10px"))
require(dplyr)
require(leaflet)
dat <- read.csv('assignment-02-data-formated.csv')
sites <- unique(dat[c('location', 'latitude', 'longitude')])
leaflet(data = sites) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, label= ~as.character(location),
labelOptions = labelOptions(noHide = T, textsize = "10px"))
shiny::runApp()
shiny::runApp()
runApp()
runApp()
?order
require(ggplot2)
dat <- read.csv('assignment-02-data-formated.csv')
str(dat)
# value: Subtract % and convert to numeric
dat$value <- as.numeric((sub('%', '', dat$value)))
str(dat)
# Sort the latitudes
site.lat <- unique(dat[c('location', 'latitude')])
site_order <- order(site.lat$latitude, decreasing = T)
site.lat <- site.lat[site_order,]
dat$location <- factor(dat$location, levels = site.lat$location)
plot1 <- ggplot(dat, aes(year, value)) + geom_point(size=1) + facet_grid(coralType~location)
plot2 <- plot1 + geom_smooth(aes(group = 1),
method = "lm",
color = "green",
formula = y~ poly(x, 2),
size = 0.6,
se = FALSE)
# labels for x and y
plot3 <- plot2 + theme_bw() +
scale_x_continuous("Year") +
scale_y_continuous("Bleaching percentage") +
theme(legend.position = "top", legend.direction = "horizontal")
plot3
require(ggplot2)
dat <- read.csv('assignment-02-data-formated.csv')
str(dat)
# value: Subtract % and convert to numeric
dat$value <- as.numeric((sub('%', '', dat$value)))
str(dat)
# Sort the latitudes
site.lat <- unique(dat[c('location', 'latitude')])
site_order <- order(site.lat$latitude, decreasing = T)
site.lat <- site.lat[site_order,]
dat$location <- factor(dat$location, levels = site.lat$location)
plot1 <- ggplot(dat, aes(year, value)) + geom_point(size=1) + facet_grid(coralType~location)
plot2 <- plot1 + geom_smooth(aes(group = 1),
method = "lm",
color = "green",
formula = y~ poly(x, 2),
size = 0.6,
se = FALSE)
# labels for x and y
plot3 <- plot2 + theme_bw() +
scale_x_continuous("Year") +
scale_y_continuous("Bleaching percentage") +
theme(legend.position = "top", legend.direction = "horizontal")
plot3
runApp()
runApp()
